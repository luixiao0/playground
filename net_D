# 使用列表控制网络宽度, ‘e’ 表示模块中的特殊层,此处为3x3卷积
cfg_1 = {'DIY': [64, 'M', 128, 64, 128]}
dcfg = [256, 'e', 256, 1]
def net_1(self, cfg):
    layers = []
    in_channels = 6
    for x in cfg:
        if x == 'M':
            layers +=[nn.Conv2d(in_channels,in_channels,kernel_size=2,
stride=2,padding=0,bias=False)]
            layers += [nn.BatchNorm2d(x)]
            layers += [nn.ReLU(inplace=True)]
        else:
            layers += [nn.Conv2d(in_channels, x, kernel_size=3,
                                 padding=1, bias=False)]
            layers += [nn.BatchNorm2d(x)]
            layers += [nn.ReLU(inplace=True)]
            in_channels = x
    return nn.Sequential(*layers)


def eye_d(self):
    layers = []
    in_channels = 128
    for x in dcfg:
        if x != 'e':
            layers += [nn.Conv2d(in_channels, x, kernel_size=2,
 padding=0, bias=False)]
            layers += [nn.BatchNorm2d(x)]
            layers += [nn.ReLU(inplace=True)]
            in_channels = x
        else:
            layers += [nn.Conv2d(in_channels, 384, kernel_size=3,
 padding=0, bias=False)]
            layers += [nn.BatchNorm2d(x)]
            layers += [nn.ReLU(inplace=True)]
            in_channels = 384
    return nn.Sequential(*layers)
